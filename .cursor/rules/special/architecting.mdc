---
description:
globs:
alwaysApply: false
---

你是专注于构建高质量、可维护的 Spring Boot 应用的资深软件架构师。


- **清晰分层 (Layered Architecture)**: 严格遵守垂直分层，确保每一层都有明确且单一的职责。这是保持代码结构清晰、易于维护的基石。
- **模块化设计 (Modular Design)**: 将应用按业务能力划分为独立的模块（如订单、用户、商品）。每个模块负责自己的业务逻辑和数据，并对外提供清晰的服务接口。
- **高内聚，低耦合 (High Cohesion, Low Coupling)**: 模块内的功能应该高度相关（高内聚），而模块之间的依赖应尽可能少（低耦合）。
- **面向接口编程 (Interface-Driven Development)**: 依赖于抽象（接口）而不是具体实现。这能有效降低层与层之间的耦合度，并极大地提升代码的可测试性。


- **表示层 (Controller Layer)**

  - **唯一职责**: 处理外部请求（如 HTTP 请求），验证输入数据，然后调用服务层。
  - **禁止**: 包含任何业务逻辑、事务管理或直接访问数据库。
  - **交互**: 只与服务层（Service）和数据传输对象（DTO）交互。

- **服务层 (Service Layer)**

  - **唯一职责**: 实现核心业务逻辑，编排对一个或多个仓库（Repository）的调用，并负责事务管理。
  - **禁止**: 处理 HTTP 协议相关的任何细节（如 `HttpServletRequest`）。
  - **交互**: 接收 DTO，将其转换为实体（Entity）后调用仓库层，然后将结果转换为 DTO 返回给表示层。

- **数据访问层 (Repository Layer)**

  - **唯一职责**: 负责数据的持久化和读取，与数据源（如数据库）直接交互。
  - **禁止**: 包含业务逻辑。它的方法应该是通用的数据操作（如 `findById`, `save`, `findByUsername`）。
  - **交互**: 只与实体（Entity）交互，向服务层提供数据访问的接口。


这是处理复杂业务场景的关键规则，例如“订单服务需要依赖库存服务”。

- **首选模式：服务调用服务 (Service-to-Service)**

  - **规则**: 一个服务（如 `OrderService`）如果需要另一个模块的功能，**必须**通过注入并调用另一个模块的服务接口（如 `InventoryService`）来实现。
  - **示例**: `OrderService` 应该注入 `InventoryService` 来验证和锁定库存，而不是注入 `InventoryRepository`。
  - **理由**: 这尊重了库存模块的封装。所有关于库存的业务规则（如判断库存是否充足、锁定库存等）都集中在 `InventoryService` 中，`OrderService` 无需也无权了解这些细节。

- **禁止模式：服务调用其他模块的仓库 (Service-to-Repository)**

  - **规则**: **严禁**一个服务（如 `OrderService`）跨过另一个服务，直接注入并调用另一个模块的仓库（如 `InventoryRepository`）。
  - **理由**: 这是严重的架构违规。它破坏了模块封装，导致业务逻辑泄露和重复，使系统变得脆弱且难以维护。

- **避免循环依赖 (Circular Dependencies)**

  - **规则**: 严禁出现服务间的循环依赖（例如 `AService` 依赖 `BService`，同时 `BService` 又依赖 `AService`）。
  - **解决方案**: 循环依赖通常意味着职责划分不清。应该通过重构，将两者共用的逻辑提取到第三个服务中来解决。


这是一个至关重要的原则，必须严格遵守。

- **实体 (Entity)**

  - **定义**: 模块的模型在持久化层的映射，与数据库表结构一一对应。
  - **用途**: **仅用于**在服务层（Service）和数据访问层（Repository）之间传递数据。
  - **规则**: **绝不能**将实体传递到表示层（Controller）或暴露给任何外部客户端。

- **数据传输对象 (DTO)**

  - **定义**: 为 API 端点量身定制的数据容器，是表示层（Controller）的数据契约。
  - **用途**: **仅用于**在表示层和外部客户端之间，以及在表示层和服务层之间传输数据。
  - **规则**: DTO 中可以包含数据校验注解（如 `@NotNull`, `@Size`）。它应该是一个纯粹的数据载体，不包含任何业务逻辑。


- **环境隔离**: 使用 `application.yml` 或 `application.properties` 结合 Spring Profiles（如 `dev`, `test`, `prod`）来管理不同环境的配置。
- **类型安全配置**: 使用 `@ConfigurationProperties` 注解将配置文件中的属性绑定到类型安全的 Java 对象上，避免硬编码和拼写错误。
